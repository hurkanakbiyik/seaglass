<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="123" tokens="356">
<file line="59" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="195" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
                    DefaultEditorKit.beepAction,
                    "PASTE",
                    DefaultEditorKit.pasteAction,
                    "RIGHT",
                    DefaultEditorKit.forwardAction,
                    "KP_RIGHT",
                    DefaultEditorKit.forwardAction,
                    "LEFT",
                    DefaultEditorKit.backwardAction,
                    "KP_LEFT",
                    DefaultEditorKit.backwardAction,
                    "shift RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift KP_RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "shift KP_LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "UP",
                    DefaultEditorKit.upAction,
                    "KP_UP",
                    DefaultEditorKit.upAction,
                    "DOWN",
                    DefaultEditorKit.downAction,
                    "KP_DOWN",
                    DefaultEditorKit.downAction,
                    "shift UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift KP_UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "shift KP_DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "alt LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt KP_LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt KP_RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt shift LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift KP_LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt shift KP_RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt UP",
                    DefaultEditorKit.beginLineAction,
                    "alt KP_UP",
                    DefaultEditorKit.beginLineAction,
                    "ctrl LEFT",
                    DefaultEditorKit.beginLineAction,
                    "ctrl KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "alt DOWN",
                    DefaultEditorKit.endLineAction,
                    "alt KP_DOWN",
                    DefaultEditorKit.endLineAction,
                    "ctrl RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "ctrl shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "HOME",
                    DefaultEditorKit.beginAction,
                    "END",
                    DefaultEditorKit.endAction,
                    "meta UP",
                    DefaultEditorKit.beginAction,
                    "meta KP_UP",
                    DefaultEditorKit.beginAction,
                    "meta DOWN",
                    DefaultEditorKit.endAction,
                    "meta KP_DOWN",
                    DefaultEditorKit.endAction,
                    "shift HOME",
                    DefaultEditorKit.selectionBeginAction,
                    "shift END",
                    DefaultEditorKit.selectionEndAction,
                    "meta A",
                    DefaultEditorKit.selectAllAction,
                    "meta shift A",
                    "unselect",
                    "controlBackground shift O",
                    "toggle-componentOrientation",
                    "alt DELETE",
                    MacEditorKit.deleteNextWordAction,
                    "alt BACK_SPACE",
                    MacEditorKit.deletePrevWordAction,
                    "ENTER",
                    JTextField.notifyAction,
                });

        // Input map for spinner editors
        UIDefaults.LazyInputMap spinnerInputMap = new UIDefaults.LazyInputMap(new String[] {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="347">
<file line="1719" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<file line="1743" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<codefragment>
<![CDATA[
        d.put(p + ".contentMargins", new InsetsUIResource(6, 6, 6, 6));
        d.put(p + ".searchIconWidth", new Integer(15));
        d.put(p + ".cancelIconWidth", new Integer(15));
        d.put(p + ".popupIconWidth", new Integer(7));
        d.put(p + ".searchLeftInnerMargin", new Integer(3));
        d.put(p + ".searchRightInnerMargin", new Integer(3));
        d.put(p + ".placeholderTextColor", d.get("seaGlassSearchPlaceholderText"));
        d.put(p + "[Disabled].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Selected].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_SELECTED));
        d.put(p + "[Disabled].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_DISABLED));
        d.put(p + "[Focused].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_FOCUSED));
        d.put(p + "[Enabled].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_ENABLED));

        // Paint with SearchFieldPainter.
        d.put(p + "[Disabled+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Selected+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_SELECTED));
        d.put(p + "[Disabled+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_DISABLED));
        d.put(p + "[Focused+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_FOCUSED));
        d.put(p + "[Enabled+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_ENABLED));

        // Initialize TextArea
        // TextArea in scroll pane is visually the same as editor pane.
        p = "TextArea";
]]>
</codefragment>
</duplication>
<duplication lines="115" tokens="339">
<file line="61" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="489" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
                    "selection-page-right",
                    "RIGHT",
                    DefaultEditorKit.forwardAction,
                    "KP_RIGHT",
                    DefaultEditorKit.forwardAction,
                    "LEFT",
                    DefaultEditorKit.backwardAction,
                    "KP_LEFT",
                    DefaultEditorKit.backwardAction,
                    "shift RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift KP_RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "shift KP_LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "UP",
                    DefaultEditorKit.upAction,
                    "KP_UP",
                    DefaultEditorKit.upAction,
                    "DOWN",
                    DefaultEditorKit.downAction,
                    "KP_DOWN",
                    DefaultEditorKit.downAction,
                    "shift UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift KP_UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "shift KP_DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "alt LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt KP_LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt KP_RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt shift LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift KP_LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt shift KP_RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt UP",
                    DefaultEditorKit.beginLineAction,
                    "alt KP_UP",
                    DefaultEditorKit.beginLineAction,
                    "ctrl LEFT",
                    DefaultEditorKit.beginLineAction,
                    "ctrl KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "alt DOWN",
                    DefaultEditorKit.endLineAction,
                    "alt KP_DOWN",
                    DefaultEditorKit.endLineAction,
                    "ctrl RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "ctrl shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "HOME",
                    DefaultEditorKit.beginAction,
                    "END",
                    DefaultEditorKit.endAction,
                    "meta UP",
                    DefaultEditorKit.beginAction,
                    "meta KP_UP",
                    DefaultEditorKit.beginAction,
                    "meta DOWN",
                    DefaultEditorKit.endAction,
                    "meta KP_DOWN",
                    DefaultEditorKit.endAction,
                    "shift HOME",
                    DefaultEditorKit.selectionBeginAction,
                    "shift END",
                    DefaultEditorKit.selectionEndAction,
                    "meta A",
                    DefaultEditorKit.selectAllAction,
                    "meta shift A",
                    "unselect",
                    "controlBackground shift O",
                    "toggle-componentOrientation",
                    "alt DELETE",
                    MacEditorKit.deleteNextWordAction,
                    "alt BACK_SPACE",
                    MacEditorKit.deletePrevWordAction,
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="279">
<file line="71" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/SpinnerNextButtonPainter.java"/>
<file line="77" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/SpinnerPreviousButtonPainter.java"/>
<codefragment>
<![CDATA[
    public SpinnerPreviousButtonPainter(Which state) {
        super();
        this.ctx = new PaintContext(CacheMode.FIXED_SIZES);

        type = getButtonType(state);
        focused = (state == Which.BACKGROUND_FOCUSED || state == Which.BACKGROUND_PRESSED_FOCUSED);
        isForeground = isForeground(state);
    }

    @Override
    protected void doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
        if (isForeground) {
            paintArrow(g, width, height);
        } else {
            paintButton(g, c, width, height);
        }
    }

    @Override
    protected PaintContext getPaintContext() {
        return ctx;
    }

    private CommonControlState getButtonType(Which state) {
        switch (state) {
        case BACKGROUND_DISABLED:
        case FOREGROUND_DISABLED:
            return CommonControlState.DISABLED;
        case BACKGROUND_ENABLED:
        case BACKGROUND_FOCUSED:
        case FOREGROUND_ENABLED:
        case FOREGROUND_FOCUSED:
            return CommonControlState.ENABLED;
        case BACKGROUND_PRESSED_FOCUSED:
        case BACKGROUND_PRESSED:
        case FOREGROUND_PRESSED_FOCUSED:
        case FOREGROUND_PRESSED:
            return CommonControlState.PRESSED;
        }
        return null;
    }

    private boolean isForeground(Which state) {
        switch (state) {
        case FOREGROUND_DISABLED:
        case FOREGROUND_ENABLED:
        case FOREGROUND_FOCUSED:
        case FOREGROUND_PRESSED_FOCUSED:
        case FOREGROUND_PRESSED:
            return true;
        default:
            return false;
        }
    }

    private void paintButton(Graphics2D g, JComponent c, int width, int height) {
        boolean useToolBarColors = isInToolBar(c);
        Shape s;

        if (focused) {
            s = createButtonShape(0, 0, width, height, CornerSize.OUTER_FOCUS);
            g.setPaint(getFocusPaint(s, FocusType.OUTER_FOCUS, useToolBarColors));
            g.fill(s);

            s = createButtonShape(0, 0, width - 1, height - 1, CornerSize.INNER_FOCUS);
]]>
</codefragment>
</duplication>
<duplication lines="97" tokens="278">
<file line="85" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="357" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
                    "decrement",
                    "shift UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift KP_UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "shift KP_DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "alt LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt KP_LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt KP_RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt shift LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift KP_LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt shift KP_RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt UP",
                    DefaultEditorKit.beginLineAction,
                    "alt KP_UP",
                    DefaultEditorKit.beginLineAction,
                    "ctrl LEFT",
                    DefaultEditorKit.beginLineAction,
                    "ctrl KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "alt DOWN",
                    DefaultEditorKit.endLineAction,
                    "alt KP_DOWN",
                    DefaultEditorKit.endLineAction,
                    "ctrl RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "ctrl shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "HOME",
                    DefaultEditorKit.beginAction,
                    "END",
                    DefaultEditorKit.endAction,
                    "meta UP",
                    DefaultEditorKit.beginAction,
                    "meta KP_UP",
                    DefaultEditorKit.beginAction,
                    "meta DOWN",
                    DefaultEditorKit.endAction,
                    "meta KP_DOWN",
                    DefaultEditorKit.endAction,
                    "shift HOME",
                    DefaultEditorKit.selectionBeginAction,
                    "shift END",
                    DefaultEditorKit.selectionEndAction,
                    "meta A",
                    DefaultEditorKit.selectAllAction,
                    "meta shift A",
                    "unselect",
                    "controlBackground shift O",
                    "toggle-componentOrientation",
                    "alt DELETE",
                    MacEditorKit.deleteNextWordAction,
                    "alt BACK_SPACE",
                    MacEditorKit.deletePrevWordAction,
                    "ENTER",
                    JTextField.notifyAction,
                });

        // Input map for multiline text fields
        UIDefaults.LazyInputMap multilineInputMap = new UIDefaults.LazyInputMap(new String[] {
]]>
</codefragment>
</duplication>
<duplication lines="91" tokens="267">
<file line="357" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="513" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
                    DefaultEditorKit.downAction,
                    "shift UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift KP_UP",
                    DefaultEditorKit.selectionUpAction,
                    "shift DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "shift KP_DOWN",
                    DefaultEditorKit.selectionDownAction,
                    "alt LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt KP_LEFT",
                    DefaultEditorKit.previousWordAction,
                    "alt RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt KP_RIGHT",
                    DefaultEditorKit.nextWordAction,
                    "alt shift LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift KP_LEFT",
                    DefaultEditorKit.selectionPreviousWordAction,
                    "alt shift RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt shift KP_RIGHT",
                    DefaultEditorKit.selectionNextWordAction,
                    "alt UP",
                    DefaultEditorKit.beginLineAction,
                    "alt KP_UP",
                    DefaultEditorKit.beginLineAction,
                    "ctrl LEFT",
                    DefaultEditorKit.beginLineAction,
                    "ctrl KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta LEFT",
                    DefaultEditorKit.beginLineAction,
                    "meta KP_LEFT",
                    DefaultEditorKit.beginLineAction,
                    "alt DOWN",
                    DefaultEditorKit.endLineAction,
                    "alt KP_DOWN",
                    DefaultEditorKit.endLineAction,
                    "ctrl RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta RIGHT",
                    DefaultEditorKit.endLineAction,
                    "meta KP_RIGHT",
                    DefaultEditorKit.endLineAction,
                    "ctrl shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "meta shift KP_LEFT",
                    DefaultEditorKit.selectionBeginLineAction,
                    "ctrl shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "ctrl shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "meta shift KP_RIGHT",
                    DefaultEditorKit.selectionEndLineAction,
                    "HOME",
                    DefaultEditorKit.beginAction,
                    "END",
                    DefaultEditorKit.endAction,
                    "meta UP",
                    DefaultEditorKit.beginAction,
                    "meta KP_UP",
                    DefaultEditorKit.beginAction,
                    "meta DOWN",
                    DefaultEditorKit.endAction,
                    "meta KP_DOWN",
                    DefaultEditorKit.endAction,
                    "shift HOME",
                    DefaultEditorKit.selectionBeginAction,
                    "shift END",
                    DefaultEditorKit.selectionEndAction,
                    "meta A",
                    DefaultEditorKit.selectAllAction,
                    "meta shift A",
                    "unselect",
                    "controlBackground shift O",
                    "toggle-componentOrientation",
                    "alt DELETE",
                    MacEditorKit.deleteNextWordAction,
                    "alt BACK_SPACE",
                    MacEditorKit.deletePrevWordAction,
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="244">
<file line="1697" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<file line="1725" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<codefragment>
<![CDATA[
        d.put(p + ".placeholderTextColor", d.get("seaGlassSearchPlaceholderText"));
        d.put(p + "[Disabled].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Selected].backgroundPainter", new LazyPainter(c, TextComponentPainter.Which.BACKGROUND_SELECTED));
        d.put(p + "[Disabled].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_DISABLED));
        d.put(p + "[Focused].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_FOCUSED));
        d.put(p + "[Enabled].borderPainter", new LazyPainter(c, TextComponentPainter.Which.BORDER_ENABLED));

        // Paint with SearchFieldPainter.
        d.put(p + "[Disabled+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Selected+SearchField].backgroundPainter", new LazyPainter(cs, SearchFieldPainter.Which.BACKGROUND_SELECTED));
        d.put(p + "[Disabled+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_DISABLED));
        d.put(p + "[Focused+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_FOCUSED));
        d.put(p + "[Enabled+SearchField].borderPainter", new LazyPainter(cs, SearchFieldPainter.Which.BORDER_ENABLED));

        // Initialize PasswordField
        p = "PasswordField";
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="198">
<file line="1978" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<file line="2072" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<codefragment>
<![CDATA[
    public void paintTabbedPaneTabBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex, int orientation) {
        if (orientation == JTabbedPane.LEFT) {
            AffineTransform transform = new AffineTransform();

            transform.scale(-1, 1);
            transform.rotate(Math.toRadians(90));
            paintBackground(context, g, y, x, h, w, transform);
        } else if (orientation == JTabbedPane.RIGHT) {
            AffineTransform transform = new AffineTransform();

            transform.rotate(Math.toRadians(90));
            transform.translate(0, -(x + w));
            paintBackground(context, g, y, 0, h, w, transform);
        } else if (orientation == JTabbedPane.BOTTOM) {
            AffineTransform transform = new AffineTransform();

            transform.translate(x, y);
            transform.scale(1, -1);
            transform.translate(0, -h);
            paintBackground(context, g, 0, 0, w, h, transform);
        } else {
            paintBackground(context, g, x, y, w, h, null);
        }
    }

    /**
     * Paints the border of a tab of a tabbed pane.
     *
     * @param context  SynthContext identifying the <code>JComponent</code> and
     *                 <code>Region</code> to paint to
     * @param g        <code>Graphics</code> to paint to
     * @param x        X coordinate of the area to paint to
     * @param y        Y coordinate of the area to paint to
     * @param w        Width of the area to paint to
     * @param h        Height of the area to paint to
     * @param tabIndex Index of tab being painted.
     */
    public void paintTabbedPaneTabBorder(SynthContext context, Graphics g, int x, int y, int w, int h, int tabIndex) {
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="179">
<file line="857" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassStyle.java"/>
<file line="140" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassStyleWrapper.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Font getFontForState(SynthContext ctx) {
        Font f = (Font) get(ctx, "font");

        if (f == null)
            f = UIManager.getFont("defaultFont");

        // Account for scale
        // The key "JComponent.sizeVariant" is used to match Apple's LAF
        String scaleKey = (String) ctx.getComponent().getClientProperty("JComponent.sizeVariant");

        if (scaleKey != null) {

            if (LARGE_KEY.equals(scaleKey)) {
                f = f.deriveFont(Math.round(f.getSize2D() * LARGE_SCALE));
            } else if (SMALL_KEY.equals(scaleKey)) {
                f = f.deriveFont(Math.round(f.getSize2D() * SMALL_SCALE));
            } else if (MINI_KEY.equals(scaleKey)) {
                f = f.deriveFont(Math.round(f.getSize2D() * MINI_SCALE));
            }
        }

        return f;

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SynthPainter getPainter(SynthContext ctx) {
        return painter;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isOpaque(SynthContext ctx) {
]]>
</codefragment>
</duplication>
<duplication lines="49" tokens="159">
<file line="274" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="432" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * Update the Synth Style.
     *
     * @param c the title pane.
     */
    private void updateStyle(JComponent c) {
        SeaGlassContext context  = getContext(this, ENABLED);
        SynthStyle      oldStyle = style;

        style = SeaGlassLookAndFeel.updateStyle(context, this);

        if (style != oldStyle) {
            titleSpacing = style.getInt(context, "InternalFrameTitlePane.titleSpacing", 2);
        }

        context.dispose();
    }

    /**
     * Create the buttons.
     */
    private void createButtons() {
        iconButton = new NoFocusButton("InternalFrameTitlePane.iconifyButtonAccessibleName");
        iconButton.addActionListener(iconifyAction);

        if (iconButtonToolTip != null && iconButtonToolTip.length() != 0) {
            iconButton.setToolTipText(iconButtonToolTip);
        }

        maxButton = new NoFocusButton("InternalFrameTitlePane.maximizeButtonAccessibleName");
        maxButton.addActionListener(maximizeAction);

        closeButton = new NoFocusButton("InternalFrameTitlePane.closeButtonAccessibleName");
        closeButton.addActionListener(closeAction);

        if (closeButtonToolTip != null && closeButtonToolTip.length() != 0) {
            closeButton.setToolTipText(closeButtonToolTip);
        }

        setButtonTooltips();
    }

    /**
     * Set the tooltips for the buttons.
     */
    private void setButtonTooltips() {
        if (isParentIcon()) {
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="157">
<file line="58" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/CheckBoxMenuItemPainter.java"/>
<file line="48" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/RadioButtonMenuItemPainter.java"/>
<codefragment>
<![CDATA[
    public RadioButtonMenuItemPainter(Which state) {
        super(MenuItemPainter.Which.BACKGROUND_ENABLED);
        this.state = state;
        switch (state) {
        case BACKGROUND_DISABLED:
        case BACKGROUND_ENABLED:
        case BACKGROUND_MOUSEOVER:
        case BACKGROUND_SELECTED_MOUSEOVER:
            this.ctx = new PaintContext(CacheMode.NO_CACHING);
            break;
        default:
            this.ctx = new PaintContext(CacheMode.FIXED_SIZES);
            break;
        }
    }

    @Override
    protected void doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
        switch (state) {
        case BACKGROUND_MOUSEOVER:
            paintBackgroundMouseOver(g, width, height);
            break;
        case BACKGROUND_SELECTED_MOUSEOVER:
            paintBackgroundMouseOver(g, width, height);
            break;
        case CHECKICON_DISABLED_SELECTED:
            paintCheckIconDisabledAndSelected(g, width, height);
            break;
        case CHECKICON_ENABLED_SELECTED:
            paintCheckIconEnabledAndSelected(g, width, height);
            break;
        case CHECKICON_SELECTED_MOUSEOVER:
            paintCheckIconSelectedAndMouseOver(g, width, height);
            break;

        }
    }

    @Override
    protected final PaintContext getPaintContext() {
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="146">
<file line="196" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TitlePaneIconifyButtonPainter.java"/>
<file line="198" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TitlePaneMaximizeButtonPainter.java"/>
<codefragment>
<![CDATA[
        maximizePainter.paintPressed(g, c, width, height);
    }

    /**
     * Paint the foreground restore button enabled state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintRestoreEnabled(Graphics2D g, JComponent c, int width, int height) {
        restorePainter.paintEnabled(g, c, width, height);
    }

    /**
     * Paint the foreground restore button mouse-over state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintRestoreHover(Graphics2D g, JComponent c, int width, int height) {
        restorePainter.paintHover(g, c, width, height);
    }

    /**
     * Paint the foreground restore button pressed state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintRestorePressed(Graphics2D g, JComponent c, int width, int height) {
        restorePainter.paintPressed(g, c, width, height);
    }

    /**
     * Paint the background of the button using the specified colors.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     * @param colors the color set to use to paint the button.
     */
    private void paintBackground(Graphics2D g, JComponent c, int width, int height, ButtonColors colors) {
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        g.setColor(colors.top);
        g.drawLine(0, 0, width - 2, 0);
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="146">
<file line="577" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="727" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
        }

        if (prop == JInternalFrame.IS_ICON_PROPERTY || prop == JInternalFrame.IS_MAXIMUM_PROPERTY) {
            setButtonTooltips();
            enableActions();

            return;
        }

        if ("closable" == prop) {

            if ((Boolean) evt.getNewValue() == Boolean.TRUE) {
                add(closeButton);
            } else {
                remove(closeButton);
            }
        } else if ("maximizable" == prop) {

            if ((Boolean) evt.getNewValue() == Boolean.TRUE) {
                add(maxButton);
            } else {
                remove(maxButton);
            }
        } else if ("iconable" == prop) {

            if ((Boolean) evt.getNewValue() == Boolean.TRUE) {
                add(iconButton);
            } else {
                remove(iconButton);
            }
        }

        enableActions();

        revalidate();
        repaint();
    }

    /**
     * Sets the state of the window. If <code>updateRegardless</code> is true
     * and the state has not changed, this will update anyway.
     *
     * @param state            the state of the window.
     * @param updateRegardless {@code true} if we are to update regardless of
     *                         the state, {@code false} otherwise.
     */
    private void setState(int state, boolean updateRegardless) {
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="138">
<file line="528" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="656" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
        return SwingUtilities2.clipStringIfNecessary(rootPane, fm, text, availTextWidth);
    }

    /**
     * @see sun.swing.plaf.synth.SynthUI#paintBorder(javax.swing.plaf.synth.SynthContext,
     *      java.awt.Graphics, int, int, int, int)
     */
    public void paintBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {
        ((SeaGlassContext) context).getPainter().paintInternalFrameTitlePaneBorder(context, g, x, y, w, h);
    }

    /**
     * Create the layout manager for the title pane.
     *
     * @return the layout manager.
     */
    private LayoutManager createLayout() {
        SeaGlassContext context = getContext(this);
        LayoutManager   lm      = (LayoutManager) style.get(context, "InternalFrameTitlePane.titlePaneLayout");

        context.dispose();

        return (lm != null) ? lm : new SeaGlassTitlePaneLayout();
    }

    /**
     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == this) {

            if (SeaGlassLookAndFeel.shouldUpdateStyle(evt)) {
                updateStyle(this);
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="127">
<file line="112" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TitlePaneIconifyButtonPainter.java"/>
<file line="114" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TitlePaneMaximizeButtonPainter.java"/>
<codefragment>
<![CDATA[
        case BACKGROUND_MAXIMIZED_PRESSED_WINDOWNOTFOCUSED:
            paintBackgroundPressed(g, c, width, height);
            paintRestorePressed(g, c, width, height);
            break;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected PaintContext getPaintContext() {
        return ctx;
    }

    /**
     * Paint the background enabled state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintBackgroundEnabled(Graphics2D g, JComponent c, int width, int height) {
        paintBackground(g, c, width, height, enabled);
    }

    /**
     * Paint the background mouse-over state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintBackgroundHover(Graphics2D g, JComponent c, int width, int height) {
        paintBackground(g, c, width, height, hover);
    }

    /**
     * Paint the background pressed state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintBackgroundPressed(Graphics2D g, JComponent c, int width, int height) {
        paintBackground(g, c, width, height, pressed);
    }

    /**
     * Paint the foreground maximized button enabled state.
     *
     * @param g      the Graphics2D context to paint with.
     * @param c      the component.
     * @param width  the width of the component.
     * @param height the height of the component.
     */
    private void paintMaximizeEnabled(Graphics2D g, JComponent c, int width, int height) {
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="127">
<file line="761" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="930" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
            height = Math.max(fm.getHeight(), height);

            width += titleSpacing + titleSpacing;

            Insets insets = getInsets();

            height += insets.top + insets.bottom;
            width  += insets.left + insets.right;
            context.dispose();

            return new Dimension(width, height);
        }

        /**
         * Determine the position of a button.
         *
         * @param  c        the button.
         * @param  insets   the title pane insets.
         * @param  x        the x position of the button.
         * @param  trailing Are we at the right edge?
         *
         * @return the modified x position for the button.
         */
        private int center(Component c, Insets insets, int x, boolean trailing) {
            Dimension pref  = c.getPreferredSize();
            int       width = pref.width;

            if (c instanceof JButton && ((JButton) c).getIcon() != null) {
                width = ((JButton) c).getIcon().getIconWidth();
            }

            if (trailing) {
                x -= width;
            }

            int y = 0;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="120">
<file line="69" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/SearchFieldPainter.java"/>
<file line="79" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TextComponentPainter.java"/>
<codefragment>
<![CDATA[
            paintBackgroundSolid(g, c, x, y, width, height);
            break;
        case BORDER_DISABLED:
        case BORDER_ENABLED:
        case BORDER_FOCUSED:
            paintBorder(g, c, x, y, width, height);
            break;
        }
    }

    /**
     * {@inheritDoc}
     */
    protected PaintContext getPaintContext() {
        return ctx;
    }

    private void paintBackground(Graphics2D g, JComponent c, int x, int y, int width, int height) {
        Color color = c.getBackground();
        if (type == CommonControlState.DISABLED) {
            color = new Color(color.getRed(), color.getGreen(), color.getBlue(), 0x80);
        }

        Shape s = shapeGenerator.createRectangle(x + 1, y + 1, width - 2, height - 2);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="109">
<file line="45" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="317" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
        UIDefaults.LazyInputMap spinnerInputMap = new UIDefaults.LazyInputMap(new String[] {
                    "BACK_SPACE",
                    DefaultEditorKit.deletePrevCharAction,
                    "DELETE",
                    DefaultEditorKit.deleteNextCharAction,
                    "meta X",
                    DefaultEditorKit.cutAction,
                    "meta C",
                    DefaultEditorKit.copyAction,
                    "meta V",
                    DefaultEditorKit.pasteAction,
                    "CUT",
                    DefaultEditorKit.cutAction,
                    "COPY",
                    DefaultEditorKit.copyAction,
                    "PASTE",
                    DefaultEditorKit.pasteAction,
                    "RIGHT",
                    DefaultEditorKit.forwardAction,
                    "KP_RIGHT",
                    DefaultEditorKit.forwardAction,
                    "LEFT",
                    DefaultEditorKit.backwardAction,
                    "KP_LEFT",
                    DefaultEditorKit.backwardAction,
                    "shift RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift KP_RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "shift KP_LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "UP",
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="109">
<file line="142" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassDesktopIconUI.java"/>
<file line="417" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassDesktopPaneUI.java"/>
<file line="175" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassInternalFrameUI.java"/>
<file line="207" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassPopupMenuUI.java"/>
<codefragment>
<![CDATA[
        context.getPainter().paintPopupMenuBackground(context, g, 0, 0, c.getWidth(), c.getHeight());
        paint(context, g);
        context.dispose();
    }

    public void paint(Graphics g, JComponent c) {
        SeaGlassContext context = getContext(c);

        paint(context, g);
        context.dispose();
    }

    protected void paint(SeaGlassContext context, Graphics g) {
    }

    public void paintBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {
        ((SeaGlassContext) context).getPainter().paintPopupMenuBorder(context, g, x, y, w, h);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="109">
<file line="769" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<file line="2321" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<codefragment>
<![CDATA[
    public void paintTextFieldBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {
        if (context.getComponent().getComponentOrientation().isLeftToRight()) {
            paintBorder(context, g, x, y, w, h, null);
        } else {
            AffineTransform transform = new AffineTransform();

            transform.translate(x, y);
            transform.scale(-1, 1);
            transform.translate(-w, 0);
            paintBorder(context, g, 0, 0, w, h, transform);
        }
    }

    /**
     * Paints the background of a toggle button.
     *
     * @param context SynthContext identifying the <code>JComponent</code> and
     *                <code>Region</code> to paint to
     * @param g       <code>Graphics</code> to paint to
     * @param x       X coordinate of the area to paint to
     * @param y       Y coordinate of the area to paint to
     * @param w       Width of the area to paint to
     * @param h       Height of the area to paint to
     */
    public void paintToggleButtonBackground(SynthContext context, Graphics g, int x, int y, int w, int h) {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="109">
<file line="333" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<file line="586" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<file line="745" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<file line="2297" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassSynthPainterImpl.java"/>
<codefragment>
<![CDATA[
    public void paintTextFieldBackground(SynthContext context, Graphics g, int x, int y, int w, int h) {
        if (context.getComponent().getComponentOrientation().isLeftToRight()) {
            paintBackground(context, g, x, y, w, h, null);
        } else {
            AffineTransform transform = new AffineTransform();

            transform.translate(x, y);
            transform.scale(-1, 1);
            transform.translate(-w, 0);
            paintBackground(context, g, 0, 0, w, h, transform);
        }
    }

    /**
     * Paints the border of a text field.
     *
     * @param context SynthContext identifying the <code>JComponent</code> and
     *                <code>Region</code> to paint to
     * @param g       <code>Graphics</code> to paint to
     * @param x       X coordinate of the area to paint to
     * @param y       Y coordinate of the area to paint to
     * @param w       Width of the area to paint to
     * @param h       Height of the area to paint to
     */
    public void paintTextFieldBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="108">
<file line="260" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassToolBarUI.java"/>
<file line="296" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassToolBarUI.java"/>
<codefragment>
<![CDATA[
        public Dimension preferredLayoutSize(Container parent) {
            JToolBar tb = (JToolBar) parent;
            Insets insets = tb.getInsets();
            Dimension dim = new Dimension();
            SeaGlassContext context = getContext(tb);

            if (tb.getOrientation() == JToolBar.HORIZONTAL) {
                dim.width = tb.isFloatable() ? SynthIcon.getIconWidth(handleIcon, context) : 0;
                Dimension compDim;
                for (int i = 0; i < tb.getComponentCount(); i++) {
                    Component component = tb.getComponent(i);
                    if (component.isVisible()) {
                        compDim = component.getPreferredSize();
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="107">
<file line="45" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<file line="607" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/util/MacKeybindings.java"/>
<codefragment>
<![CDATA[
        UIDefaults.LazyInputMap comboEditorInputMap = new UIDefaults.LazyInputMap(new String[] {
                    "BACK_SPACE",
                    DefaultEditorKit.deletePrevCharAction,
                    "DELETE",
                    DefaultEditorKit.deleteNextCharAction,
                    "meta X",
                    DefaultEditorKit.cutAction,
                    "meta C",
                    DefaultEditorKit.copyAction,
                    "meta V",
                    DefaultEditorKit.pasteAction,
                    "CUT",
                    DefaultEditorKit.cutAction,
                    "COPY",
                    DefaultEditorKit.copyAction,
                    "PASTE",
                    DefaultEditorKit.pasteAction,
                    "RIGHT",
                    DefaultEditorKit.forwardAction,
                    "KP_RIGHT",
                    DefaultEditorKit.forwardAction,
                    "LEFT",
                    DefaultEditorKit.backwardAction,
                    "KP_LEFT",
                    DefaultEditorKit.backwardAction,
                    "shift RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift KP_RIGHT",
                    DefaultEditorKit.selectionForwardAction,
                    "shift LEFT",
                    DefaultEditorKit.selectionBackwardAction,
                    "shift KP_LEFT",
                    DefaultEditorKit.selectionBackwardAction,
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="107">
<file line="51" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/SearchFieldPainter.java"/>
<file line="57" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/painter/TextComponentPainter.java"/>
<codefragment>
<![CDATA[
        type = (state == Which.BACKGROUND_DISABLED || state == Which.BACKGROUND_SOLID_DISABLED || state == Which.BORDER_DISABLED) ? CommonControlState.DISABLED
                : CommonControlState.ENABLED;
        focused = (state == Which.BORDER_FOCUSED);
    }

    /**
     * {@inheritDoc}
     */
    protected void doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
        int x = focusInsets.left;
        int y = focusInsets.top;
        width -= focusInsets.left + focusInsets.right;
        height -= focusInsets.top + focusInsets.bottom;

        switch (state) {
        case BACKGROUND_DISABLED:
        case BACKGROUND_ENABLED:
        case BACKGROUND_SELECTED:
            paintBackground(g, c, x, y, width, height);
            break;
        case BACKGROUND_SOLID_DISABLED:
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="106">
<file line="747" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="916" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
            String             frameTitle    = getTitle();
            int                title_w       = frameTitle != null ? graphicsUtils.computeStringWidth(context, fm.getFont(), fm, frameTitle)
                                                                  : 0;
            int                title_length  = frameTitle != null ? frameTitle.length() : 0;

            // Leave room for three characters in the title.
            if (title_length > 3) {
                int subtitle_w = graphicsUtils.computeStringWidth(context, fm.getFont(), fm, frameTitle.substring(0, 3) + "...");

                width += (title_w < subtitle_w) ? title_w : subtitle_w;
            } else {
                width += title_w;
            }

            height = Math.max(fm.getHeight(), height);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="105">
<file line="609" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<file line="1597" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<codefragment>
<![CDATA[
        d.put(p + ".States", "Enabled,Pressed,Disabled");
        d.put(p + "[Disabled].foreground", new ColorUIResource(0x9ba8cf));
        d.put(p + "[Enabled].foreground", new ColorUIResource(Color.BLACK));
        d.put(p + "[Pressed].foreground", new ColorUIResource(0x134D8C));
        d.put(p + "[Disabled].foregroundPainter", new LazyPainter(c, ArrowButtonPainter.Which.FOREGROUND_DISABLED));
        d.put(p + "[Enabled].foregroundPainter", new LazyPainter(c, ArrowButtonPainter.Which.FOREGROUND_ENABLED));
        d.put(p + "[Pressed].foregroundPainter", new LazyPainter(c, ArrowButtonPainter.Which.FOREGROUND_PRESSED));
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="103">
<file line="523" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassScrollBarUI.java"/>
<file line="553" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/ui/SeaGlassScrollBarUI.java"/>
<codefragment>
<![CDATA[
        trackRect.setBounds(lv.trackPosition, lv.itemEdge, lv.trackLength, lv.itemThickness);
        decrButton.setBounds(lv.decrButtonPosition, lv.itemEdge, lv.decrButtonLength, lv.itemThickness);
        incrButton.setBounds(lv.incrButtonPosition, lv.itemEdge, lv.incrButtonLength, lv.itemThickness);
        if (lv.thumbLength > 0) {
            setThumbBounds(lv.thumbPosition, lv.itemEdge, lv.thumbLength, lv.itemThickness);
        } else {
            setThumbBounds(0, 0, 0, 0);
        }
    }

    /**
     * Holds scrollbar layout values in an orientation-independent way.
     */
    private class ScrollbarLayoutValues {
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="102">
<file line="195" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassInternalFrameTitlePane.java"/>
<file line="360" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/component/SeaGlassTitlePane.java"/>
<codefragment>
<![CDATA[
        closeButton.setName("InternalFrameTitlePane.closeButton");

        add(iconButton);
        add(maxButton);
        add(closeButton);
    }

    /**
     * Create actions for the buttons.
     */
    private void createActions() {
        maximizeAction = new MaximizeAction();
        iconifyAction  = new IconifyAction();
        closeAction    = new CloseAction();
        restoreAction  = new RestoreAction();
        moveAction     = new MoveAction();
        sizeAction     = new SizeAction();
    }

    /**
     * Create the action map for the system menu.
     *
     * @return the action map.
     */
    ActionMap createActionMap() {
        ActionMap map = new ActionMapUIResource();

        map.put("showSystemMenu", new ShowSystemMenuAction(true));
        map.put("hideSystemMenu", new ShowSystemMenuAction(false));

        return map;
    }

    /**
     * Install listeners.
     */
    protected void installListeners() {
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="102">
<file line="654" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<file line="667" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<codefragment>
<![CDATA[
        d.put(p + "[Disabled+Selected].textForeground", new ColorUIResource(new Color(0, 0, 0, 0x80)));
        d.put(p + "[Disabled].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Focused].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_FOCUSED));
        d.put(p + "[Pressed].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_PRESSED));
        d.put(p + "[Focused+Pressed].backgroundPainter",
              new LazyPainter(c, ButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="101">
<file line="654" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<file line="1846" path="/Users/huxtable/Documents/workspace/seaglass/src/main/java/com/seaglasslookandfeel/SeaGlassLookAndFeel.java"/>
<codefragment>
<![CDATA[
        d.put(p + ".States", "Enabled,Disabled,Focused,Pressed");
        d.put(p + "[Disabled].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_DISABLED));
        d.put(p + "[Enabled].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_ENABLED));
        d.put(p + "[Focused].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_FOCUSED));
        d.put(p + "[Pressed].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_PRESSED));
        d.put(p + "[Focused+Pressed].backgroundPainter", new LazyPainter(c, ButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));
]]>
</codefragment>
</duplication>
</pmd-cpd>